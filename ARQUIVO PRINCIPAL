def heapbaixo(heap, posicaoinicial, posicao):

    novo_valor = heap[posicao]

    while posicao > posicaoinicial:

        posicao_pai = (posicao - 1) >> 1

        parente = heap[posicao_pai]

        if novo_valor < parente:

            heap[posicao] = parente

            posicao = posicao_pai

            continue
        break
    heap[posicao] = novo_valor
#----------------------------------------
def heapcima(heap, posicao):

    posicaofinal = len(heap)

    posicaoinicial = posicao

    novo_valor = heap[posicao]

    posicao_filho = 2*posicao + 1 

    while posicao_filho < posicaofinal:

        rightpos = posicao_filho + 1

        if rightpos < posicaofinal and not heap[posicao_filho] < heap[rightpos]:

            posicao_filho = rightpos

        heap[posicao] = heap[posicao_filho]

        posicao = posicao_filho

        posicao_filho = 2*posicao + 1

    heap[posicao] = novo_valor

    heapbaixo(heap, posicaoinicial, posicao)
#----------------------------------------
def heappush(heap, valor):

    heap.append(valor)

    heapbaixo(heap, 0, len(heap)-1)
#----------------------------------------
def heappop(heap):

    lastelt = heap.pop()

    if heap:

        retorna_valor = heap[0]

        heap[0] = lastelt

        heapcima(heap, 0)

        return retorna_valor

    return lastelt
#---------------------------------------- algoritmo de prim :

numero_nos,numero_de_arestas = input().split()
numero_nos=int(numero_nos)
numero_de_arestas=int(numero_de_arestas)

lista_heap=[]

#n_out = lista de vizinhos pra cada nó

lista_vizinhos=[[]*numero_nos for i in range(numero_nos)]

for j in range(numero_de_arestas):

    valor1,valor2,custo=input().split()

    valor1=int(valor1)

    valor2=int(valor2)

    custo=int(custo)

    lista_vizinhos[valor1].append((valor2,custo))

    lista_vizinhos[valor2].append((valor1,custo))

# até aqui estamos apenas criando a estrutura do grafo 

# começando a bagunça ...... :


#raiz escolhida : 
raiz = 4

for (x,custo) in lista_vizinhos[raiz]:

    heappush(lista_heap,(custo,raiz,x))

contador_auxiliar = 0
#contador auxiliar = n_edges
custo_total=0

marcados=[raiz]

arvore_geradora=[]

while contador_auxiliar<numero_nos-1:

    while True:

        (custo,valor1,valor2)=heappop(lista_heap)

        if valor2 not in marcados:

            break
    marcados.append(valor2)

    custo_total+=custo

    arvore_geradora.append((valor1,valor2))

    contador_auxiliar+=1

    for(x,custo) in lista_vizinhos[valor2]:

        if x not in marcados:

            heappush(lista_heap,(custo,valor2,x))

print(custo_total)

print(arvore_geradora)


